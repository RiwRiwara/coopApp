@page "/myproject"
@using CoopWeb.Data
@using CoopWeb.Services
@using CoopWeb.Utils
@using Microsoft.AspNetCore.Identity
@inject IUserService UserService
@inject UserManager<ApplicationUser> UserManager
@inject SignInManager<ApplicationUser> SignInManager
@inject NavigationManager NavigationManager
@inject ProjectService ProjectService

<PageTitle>My Project</PageTitle>

<div class="container my-5">
    @if (ProjectData == null)
    {
        <p><em>
            You are not a member of any project group. Please contact the project chairman for more information.
        </em></p>
    }
    else
    {
        <h4 class="mb-4 fw-bold">My Group</h4>
        <div class="card mb-3">
            <div class="card-header">
                Group Name: @ProjectData.ProjectName
            </div>
            <div class="card-body">
                <h5 class="">Members:</h5>
                <ul class="list-group">
                    @if (Members != null)
                    {
                        @foreach (var member in Members)
                        {
                            <li class="list-group-item">
                                <div class="text-xs text-muted">@member.Email </div>
                                @member.StudentID | @member.FirstName @member.LastName | @member.Nickname
                            </li>
                        }
                    }
                </ul>
            </div>
        </div>

        <h4 class="mb-4 fw-bold">Project Detail</h4>
        <div class="card mb-3">
            <div class="card-body">
                <ul class="list-group">
                    <li class="list-group-item">
                        <p class="fw-bold">Project Title</p>
                        <p>@ProjectData.ProjectName</p>
                    </li>
                    <li class="list-group-item">
                        <p>ประธาน : @ProjectData.Chairman</p>
                    </li>
                    <li class="list-group-item">
                        <p>กรรมการ 1 : @ProjectData.Director1</p>
                    </li>
                    <li class="list-group-item">
                        <p>กรรมการ 2 : @ProjectData.Director2</p>
                    </li>
                </ul>
            </div>
        </div>

        <h4 class="mb-4 fw-bold">Upload Process Stages</h4>
        <div class="row row-cols-1 row-cols-md-2 g-4">
            @foreach (var stage in ProjectStages)
            {
                <div class="col">
                    <div class="card">
                        <div class="card-body">
                            <div class="d-flex flex-row gap-2 align-items-center mb-4">
                                <div class="h5">@stage.StageName</div>
                                <div class="badge @(BadgeColor(stage.Status)) status-badge">@stage.Status</div>
                            </div>
                            <form>
                                <div class="mb-3">
                                    <input class="form-control" type="file" id="@($"upload_{stage.Id}")">
                                </div>
                                <button type="button" class="btn btn-primary">Upload</button>
                            </form>
                        </div>
                    </div>
                </div>
            }
        </div>
    }
</div>

@code {
    private List<Stage> ProjectStages = new List<Stage>{};

    private List<UploadStage> UploadStages = new List<UploadStage>
    {
        new UploadStage { Id = 1, Title = "1 ส่งบทนำ", Status = "New" },
        new UploadStage { Id = 2, Title = "ส่งส่วนที่1", Status = "Pending" },
        new UploadStage { Id = 3, Title = "ส่งส่วนที่2", Status = "Approved" },
        new UploadStage { Id = 4, Title = "ส่งส่วนที่3", Status = "New" },
    };

    private string BadgeColor(string status)
    {
        return status switch
        {
            "New" => "bg-primary",
            "Pending" => "bg-warning",
            "Approved" => "bg-success",
            _ => "bg-secondary"
        };
    }

    // Model for upload stage
    public class UploadStage
    {
        public int Id { get; set; }
        public string Title { get; set; }
        public string Status { get; set; }
    }

    private Project ProjectData;
    private IEnumerable<ApplicationUser> Members;

    protected override async Task OnInitializedAsync()
    {
        var user = await UserManager.GetUserAsync(SignInManager.Context.User);
        ProjectData = await UserService.GetUserProjectAsync(user.Id);

        if (ProjectData != null)
        {
            Members = await UserService.GetProjectMembersAsync(ProjectData.ProjectId);
            ProjectStages = (await ProjectService.GetStagesByProjectIdAsync(ProjectData.ProjectId)).ToList();

        }
    }

    
}
