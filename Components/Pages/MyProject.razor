@page "/myproject"
@using CoopWeb.Data
@using CoopWeb.Services
@using CoopWeb.Utils
@using Azure.Storage.Blobs



@using Microsoft.AspNetCore.Identity
@inject IUserService UserService
@inject UserManager<ApplicationUser> UserManager
@inject SignInManager<ApplicationUser> SignInManager
@inject NavigationManager NavigationManager
@inject ProjectService ProjectService
@rendermode InteractiveServer

<PageTitle>My Project</PageTitle>

<div class="container my-5">
    @if (ProjectData == null)
    {
        <p><em>
            You are not a member of any project group. Please contact the project chairman for more information.
        </em></p>
    }
    else
    {
        <h4 class="mb-4 fw-bold">
            กลุ่มโครงงาน
        </h4>
        <div class="card mb-3">
            <div class="card-header">
                ชื่อกลุ่ม :  @ProjectData.ProjectName
            </div>
            <div class="card-body">
                <h5 class="">สมาชิก:</h5>
                <ul class="list-group">
                    @if (Members != null)
                    {
                        @foreach (var member in Members)
                        {
                            <li class="list-group-item">
                                <div class="text-xs text-muted">@member.Email </div>
                                @member.StudentID | @member.FirstName @member.LastName | @member.Nickname
                            </li>
                        }
                    }
                </ul>
            </div>
        </div>

        <h4 class="mb-4 fw-bold">
            รายละเอียดโครงงาน
        </h4>
        <div class="card mb-3">
            <div class="card-body">
                <ul class="list-group">
                    <li class="list-group-item">
                        <p class="fw-bold">
                            โครงงาน : @ProjectData.ProjectName
                        </p>
                        <p>@ProjectData.ProjectName</p>
                    </li>
                    <li class="list-group-item">
                        <p>ประธาน : @ProjectData.Chairman</p>
                    </li>
                    <li class="list-group-item">
                        <p>กรรมการ 1 : @ProjectData.Director1</p>
                    </li>
                    <li class="list-group-item">
                        <p>กรรมการ 2 : @ProjectData.Director2</p>
                    </li>
                </ul>
            </div>
        </div>

        <h4 class="mb-4 fw-bold">
            สถานะของโครงงาน
        </h4>
        <div class="row row-cols-1 row-cols-md-2 g-4">
@foreach (var stage in ProjectStages)
{
    @if (stage.StageId == 5 || stage.StageId == 6 || stage.StageId == 8 || stage.StageId == 9)
    {
    <div class="col">
        <div class="card">
            <div class="card-body">
                <div class="d-flex flex-row gap-2 align-items-center mb-4">
                    <div class="h5">@stage.StageName</div>
                    <div class="badge @(BadgeColor(stage.Status)) status-badge">@stage.Status</div>
                </div>
                <form>
                    <div class="mb-3">
                        <InputFile OnChange="(e => HandleFileSelected(e, stage))" />
                    </div>
                    <button type="button" class="btn btn-primary" @onclick="() => UploadFile(stage)">Upload</button>

                    
                </form>
            </div>
        </div>
    </div>
    }

}


        </div>
    }
</div>

@code {
    private List<Stage> ProjectStages = new List<Stage>{};
    private Stage SelectedStage;
    private InputFileChangeEventArgs SelectedFile;

    private string BadgeColor(string status)
    {
        return status switch
        {
            "New" => "bg-primary",
            "Pending" => "bg-warning",
            "Approved" => "bg-success",
            "Rejected" => "bg-danger",
            _ => "bg-secondary"
        };
    }

    private Project ProjectData;
    private IEnumerable<ApplicationUser> Members;

    protected override async Task OnInitializedAsync()
    {
        var user = await UserManager.GetUserAsync(SignInManager.Context.User);
        ProjectData = await UserService.GetUserProjectAsync(user.Id);

        if (ProjectData != null)
        {
            Members = await UserService.GetProjectMembersAsync(ProjectData.ProjectId);
            ProjectStages = (await ProjectService.GetStagesByProjectIdAsync(ProjectData.ProjectId)).ToList();

        }
    }


private async Task HandleFileSelected(InputFileChangeEventArgs e, Stage stage)
    {
        SelectedStage = stage; // Store the selected stage for later use in UploadFile
        SelectedFile = e; // Store the selected file for later use in UploadFile
        // You can handle additional logic here if needed
    }

    private async Task UploadFile(Stage stage)
    {
        if (SelectedStage != null)
        {
            try
            {
                // Replace with your actual Azure Storage connection string
                var connectionString = "DefaultEndpointsProtocol=https;AccountName=ezeventstorage;AccountKey=z1QENkmBF0QFS4toPf3xz15uYP1DCMqTG+03ALgU/a+xFmudi+frCy9aNVwph0qipFpdd19jADH1+AStW4OnNg==;EndpointSuffix=core.windows.net";

                // Create a BlobServiceClient object which will be used to create a container client
                var blobServiceClient = new BlobServiceClient(connectionString);

                // Set the name of the container
                var containerName = "resources";

                // Create the container client object
                var containerClient = blobServiceClient.GetBlobContainerClient(containerName);

                // Get a reference to a blob
                var blobClient = containerClient.GetBlobClient(stage.FileName); // Use stage.FileName or generate a unique file name

                // Open a stream to the file
                using (var stream = SelectedFile.File.OpenReadStream())
                {
                    // Upload the file to Azure Storage
                    await blobClient.UploadAsync(stream, true);
                }

                // Update the stage status after successful upload
                await ProjectService.UpdateStageFilePathAsync(stage.Id, stage.FileName, "Pending");
            }
            catch (Exception ex)
            {
                // Handle exceptions
                Console.WriteLine($"Error uploading file: {ex.Message}");
            }
        }
        else
        {
            // Handle case where no stage is selected
            // You might want to add error handling or notify the user
        }
    }
    
}
