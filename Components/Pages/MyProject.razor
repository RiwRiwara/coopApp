@page "/myproject"
@using CoopWeb.Data
@using CoopWeb.Services
@using CoopWeb.Utils
@using Azure.Storage.Blobs

@using Microsoft.AspNetCore.Identity
@inject IUserService UserService
@inject UserManager<ApplicationUser> UserManager
@inject SignInManager<ApplicationUser> SignInManager
@inject NavigationManager NavigationManager
@inject ProjectService ProjectService
@inject IJSRuntime JSRuntime
@rendermode InteractiveServer

<title>My Project</title>

<div class="container my-5">
    @if (ProjectData == null)
    {
        <p><em>
                You are not a member of any project group. Please contact the project chairman for more information.
            </em></p>
    }
    else
    {
        <h4 class="mb-4 fw-bold">
            กลุ่มโครงงาน
        </h4>
        <div class="card mb-3">
            <div class="card-header">
                ชื่อกลุ่ม : @ProjectData.ProjectName
            </div>
            <div class="card-body">
                <h5 class="">สมาชิก:</h5>
                <ul class="list-group">
                    @if (Members != null)
                    {
                        @foreach (var member in Members)
                        {
                            <li class="list-group-item">
                                <div class="text-xs text-muted">@member.Email </div>
                                @member.StudentID | @member.FirstName @member.LastName | @member.Nickname
                            </li>
                        }
                    }
                </ul>
            </div>
        </div>

        <h4 class="mb-4 fw-bold">
            รายละเอียดโครงงาน
        </h4>
        <div class="card mb-3">
            <div class="card-body">
                <ul class="list-group">
                    <li class="list-group-item">
                        <p class="fw-bold">
                            โครงงาน : @ProjectData.ProjectName
                        </p>
                        <p>@ProjectData.ProjectName</p>
                    </li>
                    <li class="list-group-item">
                        <p>ประธาน : @ProjectData.Chairman</p>
                    </li>
                    <li class="list-group-item">
                        <p>กรรมการ 1 : @ProjectData.Director1</p>
                    </li>
                    <li class="list-group-item">
                        <p>กรรมการ 2 : @ProjectData.Director2</p>
                    </li>
                </ul>
            </div>
        </div>

        <h4 class="mb-4 fw-bold">
            สถานะของโครงงาน
        </h4>
        <div class="row row-cols-1 row-cols-md-2 g-4">
            @foreach (var stage in ProjectStages)
            {
                @if (stage.StageId == 5 || stage.StageId == 6 || stage.StageId == 8 || stage.StageId == 9)
                {
                    <div class="col">
                        <div class="card">
                            <div class="card-body">
                                <div class="d-flex flex-row gap-2 align-items-center mb-4">
                                    <div class="h5">@stage.StageName</div>
                                    <div class="badge @(BadgeColor(stage.Status)) status-badge">@stage.Status</div>
                                </div>

                                <div class="d-flex my-2">
                                    <a target="new" href="/uploads/@stage.FilePath">
                                        @stage.FileName
                                    </a>
                                </div>

                                <form>

                                    <div class="mb-3">
                                        <InputFile OnChange="(e => HandleFileSelected(e, stage))" />
                                    </div>
                                    <button type="button" class="btn btn-primary" @onclick="() => UploadFile(stage)">Upload</button>
                                </form>
                            </div>
                        </div>
                    </div>
                }
            }
        </div>
    }
</div>

@code {
    private List<Stage> ProjectStages = new List<Stage> { };
    private Stage SelectedStage;
    private IBrowserFile SelectedFile;

    private string BadgeColor(string status)
    {
        return status switch
        {
            "New" => "bg-primary",
            "Pending" => "bg-warning",
            "Approved" => "bg-success",
            "Rejected" => "bg-danger",
            _ => "bg-secondary"
        };
    }

    private Project ProjectData;
    private IEnumerable<ApplicationUser> Members;

    protected override async Task OnInitializedAsync()
    {
        var user = await UserManager.GetUserAsync(SignInManager.Context.User);
        ProjectData = await UserService.GetUserProjectAsync(user.Id);

        if (ProjectData != null)
        {
            Members = await UserService.GetProjectMembersAsync(ProjectData.ProjectId);
            ProjectStages = (await ProjectService.GetStagesByProjectIdAsync(ProjectData.ProjectId)).ToList();
        }
    }

    private async Task HandleFileSelected(InputFileChangeEventArgs e, Stage stage)
    {
        SelectedStage = stage; // Store the selected stage for later use in UploadFile
        SelectedFile = e.File; // Store the selected file for later use in UploadFile
    }

    private async Task UploadFile(Stage stage)
    {
        if (SelectedStage != null && SelectedFile != null)
        {
            try
            {
                // Define the path to save the file
                var folderPath = Path.Combine(Directory.GetCurrentDirectory(), "wwwroot", "uploads");
                // Create the directory if it doesn't exist
                if (!Directory.Exists(folderPath))
                {
                    Directory.CreateDirectory(folderPath);
                }
                var randomFileName = Path.GetRandomFileName() + Path.GetExtension(SelectedFile.Name);
                // Generate a unique filename to avoid overwriting
                var filePath = Path.Combine(folderPath, randomFileName);

                // Save the file to the specified path
                using (var fileStream = new FileStream(filePath, FileMode.Create))
                {
                    await SelectedFile.OpenReadStream().CopyToAsync(fileStream);
                }

                await ProjectService.UpdateStageFileDataAsync(stage.Id, filePath, SelectedFile.Name, "Pending", randomFileName);

                SelectedStage = null;
                SelectedFile = null;
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error uploading file: {ex.Message}");
            }
        }


    }

    private async Task DownloadFile(string filePath)
    {
        var encodedFilePath = Uri.EscapeDataString(filePath);
        var downloadUrl = $"api/FileDownloadController/download?filePath={encodedFilePath}";

        await JSRuntime.InvokeVoidAsync("downloadFile", downloadUrl);
    }

}
