@page "/projects"
@rendermode InteractiveServer

@using CoopWeb.Data
@using CoopWeb.Services
@using CoopWeb.Utils
@using Microsoft.AspNetCore.Identity
@inject ProjectService ProjectService
@inject IUserService UserService
@inject UserManager<ApplicationUser> UserManager
@inject SignInManager<ApplicationUser> SignInManager
@inject NavigationManager NavigationManager
@using CoopWeb.Utils
<PageTitle>Review Projects</PageTitle>

<div class="container my-5">
    <h4 class="mb-4 fw-bold">
        โครงงานทั้งหมด
    </h4>
    @if (AllProjects == null)
    {
        <p><em>Loading...</em></p>
    }
    else if (AllProjects.Count == 0)
    {
        <p><em>
                ไม่มีโครงงานในระบบ
            </em></p>
    }
    else
    {
        <RadzenButton Click="@CreateNewProject" Text="Create New Project" ButtonStyle="ButtonStyle.Success"></RadzenButton>
        <div class="container p-2 shadow-sm rounded my-4">
            @if (showForm)
            {
                @if (isEditMode)
                {
                    <h2>
                        แก้ไขโครงงาน [@currentProject.ProjectId] - @currentProject.ProjectName
                    </h2>
                }
                else
                {
                    <h2>
                        สร้างโครงงาน
                    </h2>
                }
                <EditForm Model="@currentProject" OnValidSubmit="HandleValidSubmit" class="d-flex flex-column gap-2">
                    <DataAnnotationsValidator />
                    <ValidationSummary />
                    <div class="form-group">
                        <label>ชื่อ</label>
                        <InputText class="form-control" @bind-Value="currentProject.ProjectName" />
                    </div>
                    <div class="form-group">
                        <label>
                            ประธาน
                        </label>
                        <InputText class="form-control" @bind-Value="currentProject.Chairman" />
                    </div>
                    <div class="form-group">
                        <label>
                            กรรมการ
                        </label>
                        <InputText class="form-control" @bind-Value="currentProject.Director1" />
                    </div>
                    <div class="form-group">
                        <label>
                            กรรมการ
                        </label>
                        <InputText class="form-control" @bind-Value="currentProject.Director2" />
                    </div>
                    <button type="submit" class="btn btn-primary">Save</button>
                    <button type="button" class="btn btn-secondary" @onclick="Cancel">Cancel</button>
                </EditForm>
            }
        </div>

        @foreach (var project in AllProjects)
        {
            <div class="mb-3 container shadow-sm rounded p-2">
                <h3 class="fw-bold ">
                    Project Id : [@project.ProjectId] -
                    @project.ProjectName
                </h3>

                <div class="my-2">
                    <RadzenStack Gap="1rem" Class="">
                        <RadzenAccordion Multiple="true" Collapse=@(args => Change(args, "Accordion", "collapsed"))
                            Expand=@(args => Change(args, "Accordion", "expanded"))>
                            <Items>
                                <RadzenAccordionItem Text="สมาชิก" Icon="account_box">
                                    @if (!ProjectMembers.ContainsKey(project.ProjectId))
                                    {
                                        <p><em>
                                                โหลดข้อมูลสมาชิก...
                                            </em></p>
                                    }
                                    else
                                    {
                                        <ul class="list-group mb-1">
                                            @foreach (var member in ProjectMembers[project.ProjectId])
                                            {
                                                <li class="list-group-item">
                                                    @member.StudentID | @member.FirstName @member.LastName | @member.Nickname
                                                </li>
                                            }
                                        </ul>
                                    }
                                </RadzenAccordionItem>
                                <RadzenAccordionItem Text="กรรมการ" Icon="account_box">
                                    <ul class="list-group">
                                        <li class="list-group-item">
                                            <p>ประธาน : @project.Chairman</p>
                                        </li>
                                        <li class="list-group-item">
                                            <p>กรรมการ 1 : @project.Director1</p>
                                        </li>
                                        <li class="list-group-item">
                                            <p>กรรมการ 2 : @project.Director2</p>
                                        </li>
                                    </ul>
                                </RadzenAccordionItem>
                                <RadzenAccordionItem Text="การส่งงงาน" Icon="account_box">
                                    @if (!ProjectStages.ContainsKey(project.ProjectId))
                                    {
                                        <p><em>Loading stages...</em></p>
                                    }
                                    else
                                    {
                                        <ul class="list-group">
                                            @foreach (var stage in ProjectStages[project.ProjectId])
                                            {
                                                <li class="list-group-item">
                                                    <p>
                                                        รอบที่ @stage.StageNumber : @stage.StageName - สถานะ: @stage.Status -
                                                        กำหนดเส้นตาย: @stage.Deadline?.ToString("yyyy-MM-dd")
                                                    </p>


                                                    <EditForm Model="@stage"
                                                        OnValidSubmit="@(async () => await OnUpdateStageDeadlineAsync(stage, stage.Deadline))">
                                                        <div class="input-group mb-3">
                                                            <input id="deadlinePicker" type="date" class="form-control"
                                                                @bind="@stage.Deadline" />
                                                            <button type="submit" class="btn btn-primary">Update</button>
                                                        </div>
                                                    </EditForm>


                                                    <a target="new" href="/uploads/@stage.FilePath">
                                                        @stage.FileName
                                                    </a>

                                                    <div class="d-flex flex-row gap-2 p-2 ">
                                                        <button type="button" class="btn btn-success"
                                                            @onclick="(e => OnApproved(stage))">Approved</button>
                                                        <button type="button" class="btn btn-danger"
                                                            @onclick="(e => OnRejected(stage))">Rejected</button>
                                                    </div>

                                                </li>


                                            }
                                        </ul>
                                    }
                                </RadzenAccordionItem>
                            </Items>
                        </RadzenAccordion>
                    </RadzenStack>
                </div>

                <div class="d-flex justify-content-end gap-2">
                    <button class="btn btn-primary" @onclick="() => EditProject(project)">
                        แก้ไข
                    </button>
                </div>
            </div>
        }
    }
</div>

@code {
    private List<Project> AllProjects;
    private Dictionary<int, List<ApplicationUser>> ProjectMembers = new Dictionary<int, List<ApplicationUser>>();
    private Dictionary<int, List<Stage>> ProjectStages = new Dictionary<int, List<Stage>>();
    private Project currentProject = new Project();
    private bool showForm = false;
    private bool isEditMode = false;

    protected override async Task OnInitializedAsync()
    {
        CheckUserRole.Initialize(UserManager, SignInManager);

        var isStaff = await CheckUserRole.IsStaffAsync();
        if (!isStaff)
        {
            NavigationManager.NavigateTo("/");
        }
        else
        {
            await ReloadProjects();
        }
    }

    private async Task ReloadProjects()
    {
        AllProjects = (await ProjectService.GetAllProjectsAsync()).ToList();
        await LoadProjectMembers();
        await LoadProjectStages();
    }

    private async Task LoadProjectMembers()
    {
        foreach (var project in AllProjects)
        {
            ProjectMembers[project.ProjectId] = (await ProjectService.GetProjectMembersAsync(project.ProjectId)).ToList();
        }
    }

    private async Task LoadProjectStages()
    {
        foreach (var project in AllProjects)
        {
            ProjectStages[project.ProjectId] = (await ProjectService.GetStagesByProjectIdAsync(project.ProjectId)).ToList();
        }
    }

    private void CreateNewProject()
    {
        currentProject = new Project();
        showForm = true;
        isEditMode = false;
    }

    private void EditProject(Project project)
    {
        currentProject = project;
        showForm = true;
        isEditMode = true;
    }

    private async Task DeleteProject(int projectId)
    {
        await ProjectService.DeleteProjectAsync(projectId);
        await ReloadProjects();
    }

    private async Task HandleValidSubmit()
    {
        if (isEditMode)
        {
            await ProjectService.UpdateProjectAsync(currentProject);
        }
        else
        {
            await ProjectService.CreateProjectAsync(currentProject);
        }
        showForm = false;
        await ReloadProjects();
    }

    private void Cancel()
    {
        showForm = false;
    }

    void Change(object value, string name, string action)
    {
    }


    private async Task OnApproved(Stage stage)
    {
        await ProjectService.UpdateStageFilePathAsync(stage.Id, stage.FilePath, "Approved");
    }

    private async Task OnRejected(Stage stage)
    {
        await ProjectService.UpdateStageFilePathAsync(stage.Id, stage.FilePath, "Rejected");
    }
    private async Task OnUpdateStageDeadlineAsync(Stage stage, DateTime? deadline)
    {
        await ProjectService.UpdateStageDeadlineAsync(stage.Id, deadline);
    }

}
