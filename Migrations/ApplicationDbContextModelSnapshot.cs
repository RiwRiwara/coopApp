// <auto-generated />
using System;
using CoopWeb.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CoopWeb.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("CoopWeb.Data.ApplicationRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            Name = "Student",
                            NormalizedName = "STUDENT"
                        },
                        new
                        {
                            Id = "2",
                            Name = "Staff",
                            NormalizedName = "STAFF"
                        },
                        new
                        {
                            Id = "3",
                            Name = "Teacher",
                            NormalizedName = "TEACHER"
                        });
                });

            modelBuilder.Entity("CoopWeb.Data.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("FirstName")
                        .HasColumnType("longtext");

                    b.Property<string>("LastName")
                        .HasColumnType("longtext");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Nickname")
                        .HasColumnType("longtext");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<string>("RoleId")
                        .HasColumnType("longtext");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<string>("StudentID")
                        .HasColumnType("longtext");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("Users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "34191557-0c42-4ca2-a10a-f5d497adf722",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "21acba35-f89f-4300-91c2-24541179ec06",
                            Email = "staff@example.com",
                            EmailConfirmed = false,
                            FirstName = "Jane",
                            LastName = "Doe",
                            LockoutEnabled = false,
                            Nickname = "Janie",
                            NormalizedEmail = "STAFF@EXAMPLE.COM",
                            NormalizedUserName = "STAFF@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEMmS7xXYgTqw/M8rHaeMEZFgEC6yBzEtuwGvOCgAgHgQaGFWxdV4nFiWMBPL3bFkDg==",
                            PhoneNumberConfirmed = false,
                            ProjectId = 0,
                            RoleId = "2",
                            SecurityStamp = "a63c97a6-0b9c-4d12-affb-10e6c359a70d",
                            TwoFactorEnabled = false,
                            UserName = "staff@example.com"
                        },
                        new
                        {
                            Id = "61aeac9a-e6a0-437d-9342-c886066509d4",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "341e52b9-9846-4921-997e-2c58d2d735aa",
                            Email = "teacher@example.com",
                            EmailConfirmed = false,
                            FirstName = "Jim",
                            LastName = "Beam",
                            LockoutEnabled = false,
                            Nickname = "Jimmy",
                            NormalizedEmail = "TEACHER@EXAMPLE.COM",
                            NormalizedUserName = "TEACHER@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEBOa+1HttyTENa3nM64tj0zdGLks4XZRL/VZhbOuxDcKeSiM0pc1mlMHArsXP1zPRg==",
                            PhoneNumberConfirmed = false,
                            ProjectId = 0,
                            RoleId = "3",
                            SecurityStamp = "ab637dbc-8499-4dca-98ba-272e08275953",
                            TwoFactorEnabled = false,
                            UserName = "teacher@example.com"
                        },
                        new
                        {
                            Id = "42272f9c-fbd4-4ad0-b130-4e5e229022ed",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b399856f-7c76-425d-a5ef-f5b2c67a7a85",
                            Email = "student@example.com",
                            EmailConfirmed = false,
                            FirstName = "John",
                            LastName = "Doe",
                            LockoutEnabled = false,
                            Nickname = "Johnny",
                            NormalizedEmail = "STUDENT@EXAMPLE.COM",
                            NormalizedUserName = "STUDENT@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEI+GdWIgoSxaJcjTGy/2Bc4rszvMNM4foy+bFJCs4Ckx05jck50Tw1gGNXWZ1e+KMg==",
                            PhoneNumberConfirmed = false,
                            ProjectId = 0,
                            RoleId = "1",
                            SecurityStamp = "07f03550-dfd7-4e7f-8990-bf861778a77b",
                            StudentID = "00001",
                            TwoFactorEnabled = false,
                            UserName = "student@example.com"
                        },
                        new
                        {
                            Id = "88a2bd3f-452d-470a-9095-19437065576a",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e447e8a5-883e-4c1c-ad59-0317537caa08",
                            Email = "student2@example.com",
                            EmailConfirmed = false,
                            FirstName = "Jeed",
                            LastName = "Deed",
                            LockoutEnabled = false,
                            Nickname = "asdasd",
                            NormalizedEmail = "STUDENT2@EXAMPLE.COM",
                            NormalizedUserName = "STUDENT2@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEOxSNwlOpZEr2QrxMonTrCB6TmAWVGGp7aegfYvZuSGEpUt6Ufq7spgyS62O16Rv7Q==",
                            PhoneNumberConfirmed = false,
                            ProjectId = 0,
                            RoleId = "1",
                            SecurityStamp = "75b3ed74-625b-40b9-8633-8dca89bbcb2b",
                            StudentID = "00002",
                            TwoFactorEnabled = false,
                            UserName = "student2@example.com"
                        });
                });

            modelBuilder.Entity("CoopWeb.Data.Project", b =>
                {
                    b.Property<int>("ProjectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("ProjectId"));

                    b.Property<string>("Advisor")
                        .HasColumnType("longtext");

                    b.Property<string>("Chairman")
                        .HasColumnType("longtext");

                    b.Property<string>("Director1")
                        .HasColumnType("longtext");

                    b.Property<string>("Director2")
                        .HasColumnType("longtext");

                    b.Property<string>("ProjectName")
                        .HasColumnType("longtext");

                    b.Property<string>("WorkPlace")
                        .HasColumnType("longtext");

                    b.HasKey("ProjectId");

                    b.ToTable("Projects");

                    b.HasData(
                        new
                        {
                            ProjectId = 1,
                            ProjectName = "Project 1"
                        },
                        new
                        {
                            ProjectId = 2,
                            ProjectName = "Project 2"
                        });
                });

            modelBuilder.Entity("CoopWeb.Data.Stage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("Deadline")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<int>("StageId")
                        .HasColumnType("int");

                    b.Property<string>("StageName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("StageNumber")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Stages");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Deadline = new DateTime(2024, 8, 1, 17, 49, 37, 603, DateTimeKind.Local).AddTicks(2588),
                            Description = "Description for Stage 1",
                            FileName = "File1.pdf",
                            ProjectId = 1,
                            StageId = 1,
                            StageName = "Stage 1",
                            StageNumber = 1,
                            Status = "Not Started"
                        },
                        new
                        {
                            Id = 2,
                            Deadline = new DateTime(2024, 9, 1, 17, 49, 37, 603, DateTimeKind.Local).AddTicks(2648),
                            Description = "Description for Stage 2",
                            FileName = "File2.pdf",
                            ProjectId = 1,
                            StageId = 2,
                            StageName = "Stage 2",
                            StageNumber = 2,
                            Status = "Not Started"
                        },
                        new
                        {
                            Id = 3,
                            Deadline = new DateTime(2024, 10, 1, 17, 49, 37, 603, DateTimeKind.Local).AddTicks(2653),
                            Description = "Description for Stage 3",
                            FileName = "File3.pdf",
                            ProjectId = 1,
                            StageId = 3,
                            StageName = "Stage 3",
                            StageNumber = 3,
                            Status = "Not Started"
                        },
                        new
                        {
                            Id = 4,
                            Deadline = new DateTime(2024, 11, 1, 17, 49, 37, 603, DateTimeKind.Local).AddTicks(2657),
                            Description = "Description for Stage 4",
                            FileName = "File4.pdf",
                            ProjectId = 1,
                            StageId = 4,
                            StageName = "Stage 4",
                            StageNumber = 4,
                            Status = "Not Started"
                        },
                        new
                        {
                            Id = 5,
                            Deadline = new DateTime(2024, 8, 1, 17, 49, 37, 603, DateTimeKind.Local).AddTicks(2662),
                            Description = "Description for Stage 1",
                            FileName = "File5.pdf",
                            ProjectId = 2,
                            StageId = 5,
                            StageName = "Stage 1",
                            StageNumber = 1,
                            Status = "Not Started"
                        },
                        new
                        {
                            Id = 6,
                            Deadline = new DateTime(2024, 9, 1, 17, 49, 37, 603, DateTimeKind.Local).AddTicks(2673),
                            Description = "Description for Stage 2",
                            FileName = "File6.pdf",
                            ProjectId = 2,
                            StageId = 6,
                            StageName = "Stage 2",
                            StageNumber = 2,
                            Status = "Not Started"
                        },
                        new
                        {
                            Id = 7,
                            Deadline = new DateTime(2024, 10, 1, 17, 49, 37, 603, DateTimeKind.Local).AddTicks(2678),
                            Description = "Description for Stage 3",
                            FileName = "File7.pdf",
                            ProjectId = 2,
                            StageId = 7,
                            StageName = "Stage 3",
                            StageNumber = 3,
                            Status = "Not Started"
                        },
                        new
                        {
                            Id = 8,
                            Deadline = new DateTime(2024, 11, 1, 17, 49, 37, 603, DateTimeKind.Local).AddTicks(2683),
                            Description = "Description for Stage 4",
                            FileName = "File8.pdf",
                            ProjectId = 2,
                            StageId = 8,
                            StageName = "Stage 4",
                            StageNumber = 4,
                            Status = "Not Started"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("CoopWeb.Data.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("CoopWeb.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("CoopWeb.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("CoopWeb.Data.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoopWeb.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("CoopWeb.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
