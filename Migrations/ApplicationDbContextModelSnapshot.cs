// <auto-generated />
using System;
using CoopWeb.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CoopWeb.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("CoopWeb.Data.ApplicationRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            Name = "Student",
                            NormalizedName = "STUDENT"
                        },
                        new
                        {
                            Id = "2",
                            Name = "Staff",
                            NormalizedName = "STAFF"
                        },
                        new
                        {
                            Id = "3",
                            Name = "Teacher",
                            NormalizedName = "TEACHER"
                        });
                });

            modelBuilder.Entity("CoopWeb.Data.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("FirstName")
                        .HasColumnType("longtext");

                    b.Property<string>("LastName")
                        .HasColumnType("longtext");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Nickname")
                        .HasColumnType("longtext");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<string>("RoleId")
                        .HasColumnType("longtext");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<string>("StudentID")
                        .HasColumnType("longtext");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("Users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "6a40d6a5-77d5-4b60-b25f-6c2620267939",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "16b953dc-bafe-42c3-af65-2155581c78db",
                            Email = "staff@example.com",
                            EmailConfirmed = false,
                            FirstName = "Jane",
                            LastName = "Doe",
                            LockoutEnabled = false,
                            Nickname = "Janie",
                            NormalizedEmail = "STAFF@EXAMPLE.COM",
                            NormalizedUserName = "STAFF@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAECodCPHg5XEnvdcXFMY/mf0VjSsCWZnsYzGXEIY+mFMuh7FTrI1LcvDJP5pVzN9aUA==",
                            PhoneNumberConfirmed = false,
                            ProjectId = 0,
                            RoleId = "2",
                            SecurityStamp = "2f74521c-d973-4236-bfd5-143e0f9e722b",
                            TwoFactorEnabled = false,
                            UserName = "staff@example.com"
                        },
                        new
                        {
                            Id = "88ac8de6-b57c-4cc7-9cd7-8e6e22e09dea",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "81777300-944a-4df7-94cf-de7aab2b598c",
                            Email = "teacher@example.com",
                            EmailConfirmed = false,
                            FirstName = "Jim",
                            LastName = "Beam",
                            LockoutEnabled = false,
                            Nickname = "Jimmy",
                            NormalizedEmail = "TEACHER@EXAMPLE.COM",
                            NormalizedUserName = "TEACHER@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEI+25bQc7qadQwrxmvEC5GiOibfTl2MJQImHZseVw+JivE8Yiu7bGmwUXPnxAf5hCA==",
                            PhoneNumberConfirmed = false,
                            ProjectId = 0,
                            RoleId = "3",
                            SecurityStamp = "9a74dd77-5266-43e7-aeef-436a6d70b4d4",
                            TwoFactorEnabled = false,
                            UserName = "teacher@example.com"
                        },
                        new
                        {
                            Id = "9324110c-35ac-485c-9dff-6f92b07d01ad",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "bad6c4f4-4b48-4d7a-a257-1cdb283405c2",
                            Email = "student@example.com",
                            EmailConfirmed = false,
                            FirstName = "John",
                            LastName = "Doe",
                            LockoutEnabled = false,
                            Nickname = "Johnny",
                            NormalizedEmail = "STUDENT@EXAMPLE.COM",
                            NormalizedUserName = "STUDENT@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEEyKj8H+FVcKGpKHU5k0zTEKrQliY5kqwqisVWkAwYQuFqqzH0uicvdGmee/YOtv3Q==",
                            PhoneNumberConfirmed = false,
                            ProjectId = 0,
                            RoleId = "1",
                            SecurityStamp = "f7131d11-9af6-4030-a335-1a4e897a961a",
                            StudentID = "00001",
                            TwoFactorEnabled = false,
                            UserName = "student@example.com"
                        },
                        new
                        {
                            Id = "6a38625d-722e-401f-953b-da8f8b3865c8",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e6b6bee0-a7df-4dee-bacb-4ebd1c1bc705",
                            Email = "student2@example.com",
                            EmailConfirmed = false,
                            FirstName = "Jeed",
                            LastName = "Deed",
                            LockoutEnabled = false,
                            Nickname = "asdasd",
                            NormalizedEmail = "STUDENT2@EXAMPLE.COM",
                            NormalizedUserName = "STUDENT2@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEM3PZITHUiL+eEWT+gO/C23/nz5moCctJ+KjybI5wv9n9FoyNVKmgNp94I0mBIs2Dg==",
                            PhoneNumberConfirmed = false,
                            ProjectId = 0,
                            RoleId = "1",
                            SecurityStamp = "dd0a4b6e-7e1b-42d9-8640-e6af9dce905b",
                            StudentID = "00002",
                            TwoFactorEnabled = false,
                            UserName = "student2@example.com"
                        });
                });

            modelBuilder.Entity("CoopWeb.Data.Project", b =>
                {
                    b.Property<int>("ProjectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("ProjectId"));

                    b.Property<string>("Advisor")
                        .HasColumnType("longtext");

                    b.Property<string>("Chairman")
                        .HasColumnType("longtext");

                    b.Property<string>("Director1")
                        .HasColumnType("longtext");

                    b.Property<string>("Director2")
                        .HasColumnType("longtext");

                    b.Property<string>("ProjectName")
                        .HasColumnType("longtext");

                    b.Property<string>("WorkPlace")
                        .HasColumnType("longtext");

                    b.HasKey("ProjectId");

                    b.ToTable("Projects");

                    b.HasData(
                        new
                        {
                            ProjectId = 1,
                            ProjectName = "Project 1",
                            WorkPlace = "SCG Chemicals Co., Ltd."
                        },
                        new
                        {
                            ProjectId = 2,
                            ProjectName = "Project 2",
                            WorkPlace = "Toyota Motor Thailand"
                        });
                });

            modelBuilder.Entity("CoopWeb.Data.Stage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("Deadline")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<int>("StageId")
                        .HasColumnType("int");

                    b.Property<string>("StageName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("StageNumber")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Stages");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Deadline = new DateTime(2024, 8, 13, 18, 2, 32, 90, DateTimeKind.Local).AddTicks(39),
                            Description = "Description for Stage 1",
                            FileName = "File1.pdf",
                            FilePath = "File1.pdf",
                            ProjectId = 1,
                            StageId = 1,
                            StageName = "Stage 1",
                            StageNumber = 1,
                            Status = "Not Started"
                        },
                        new
                        {
                            Id = 2,
                            Deadline = new DateTime(2024, 9, 13, 18, 2, 32, 90, DateTimeKind.Local).AddTicks(77),
                            Description = "Description for Stage 2",
                            FileName = "File2.pdf",
                            FilePath = "File2.pdf",
                            ProjectId = 1,
                            StageId = 2,
                            StageName = "Stage 2",
                            StageNumber = 2,
                            Status = "Not Started"
                        },
                        new
                        {
                            Id = 3,
                            Deadline = new DateTime(2024, 10, 13, 18, 2, 32, 90, DateTimeKind.Local).AddTicks(82),
                            Description = "Description for Stage 3",
                            FileName = "File3.pdf",
                            FilePath = "File3.pdf",
                            ProjectId = 1,
                            StageId = 3,
                            StageName = "Stage 3",
                            StageNumber = 3,
                            Status = "Not Started"
                        },
                        new
                        {
                            Id = 4,
                            Deadline = new DateTime(2024, 11, 13, 18, 2, 32, 90, DateTimeKind.Local).AddTicks(87),
                            Description = "Description for Stage 4",
                            FileName = "File4.pdf",
                            FilePath = "File4.pdf",
                            ProjectId = 1,
                            StageId = 4,
                            StageName = "Stage 4",
                            StageNumber = 4,
                            Status = "Not Started"
                        },
                        new
                        {
                            Id = 5,
                            Deadline = new DateTime(2024, 8, 13, 18, 2, 32, 90, DateTimeKind.Local).AddTicks(92),
                            Description = "Description for Stage 1",
                            FileName = "File5.pdf",
                            FilePath = "File5.pdf",
                            ProjectId = 2,
                            StageId = 5,
                            StageName = "Stage 1",
                            StageNumber = 1,
                            Status = "Not Started"
                        },
                        new
                        {
                            Id = 6,
                            Deadline = new DateTime(2024, 9, 13, 18, 2, 32, 90, DateTimeKind.Local).AddTicks(100),
                            Description = "Description for Stage 2",
                            FileName = "File6.pdf",
                            FilePath = "File6.pdf",
                            ProjectId = 2,
                            StageId = 6,
                            StageName = "Stage 2",
                            StageNumber = 2,
                            Status = "Not Started"
                        },
                        new
                        {
                            Id = 7,
                            Deadline = new DateTime(2024, 10, 13, 18, 2, 32, 90, DateTimeKind.Local).AddTicks(105),
                            Description = "Description for Stage 3",
                            FileName = "File7.pdf",
                            FilePath = "File7.pdf",
                            ProjectId = 2,
                            StageId = 7,
                            StageName = "Stage 3",
                            StageNumber = 3,
                            Status = "Not Started"
                        },
                        new
                        {
                            Id = 8,
                            Deadline = new DateTime(2024, 11, 13, 18, 2, 32, 90, DateTimeKind.Local).AddTicks(110),
                            Description = "Description for Stage 4",
                            FileName = "File8.pdf",
                            FilePath = "File8.pdf",
                            ProjectId = 2,
                            StageId = 8,
                            StageName = "Stage 4",
                            StageNumber = 4,
                            Status = "Not Started"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("CoopWeb.Data.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("CoopWeb.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("CoopWeb.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("CoopWeb.Data.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoopWeb.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("CoopWeb.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
