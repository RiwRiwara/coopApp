// <auto-generated />
using System;
using CoopWeb.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CoopWeb.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("CoopWeb.Data.ApplicationRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            Name = "Student",
                            NormalizedName = "STUDENT"
                        },
                        new
                        {
                            Id = "2",
                            Name = "Staff",
                            NormalizedName = "STAFF"
                        },
                        new
                        {
                            Id = "3",
                            Name = "Teacher",
                            NormalizedName = "TEACHER"
                        });
                });

            modelBuilder.Entity("CoopWeb.Data.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("FirstName")
                        .HasColumnType("longtext");

                    b.Property<string>("LastName")
                        .HasColumnType("longtext");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Nickname")
                        .HasColumnType("longtext");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<string>("RoleId")
                        .HasColumnType("longtext");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<string>("StudentID")
                        .HasColumnType("longtext");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("Users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "f798ac8a-6146-4152-b796-7071e750a2e9",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a3ee970c-dd18-4124-b444-cb0624db9f09",
                            Email = "staff@example.com",
                            EmailConfirmed = false,
                            FirstName = "Jane",
                            LastName = "Doe",
                            LockoutEnabled = false,
                            Nickname = "Janie",
                            NormalizedEmail = "STAFF@EXAMPLE.COM",
                            NormalizedUserName = "STAFF@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEJX1xaIi1H4/9sLxsGMYg1lq56ZZAsz0dKaJGBhrmks6063wGPLesnwhx85/1eoc9Q==",
                            PhoneNumberConfirmed = false,
                            ProjectId = 0,
                            RoleId = "2",
                            SecurityStamp = "a32ee8d8-339f-4d71-a73f-4e4dd0ad6d92",
                            TwoFactorEnabled = false,
                            UserName = "staff@example.com"
                        },
                        new
                        {
                            Id = "d92285f8-643b-4074-bc84-0e202fc39684",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "eb995fb4-a398-40d3-9392-6935b46c81ce",
                            Email = "teacher@example.com",
                            EmailConfirmed = false,
                            FirstName = "Jim",
                            LastName = "Beam",
                            LockoutEnabled = false,
                            Nickname = "Jimmy",
                            NormalizedEmail = "TEACHER@EXAMPLE.COM",
                            NormalizedUserName = "TEACHER@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEOuS+zDgJQxFIlFeBwbudRmKocLmTWAefXDHyfZYLoSR4dFZOlmATc+OdDUuLzUs2A==",
                            PhoneNumberConfirmed = false,
                            ProjectId = 0,
                            RoleId = "3",
                            SecurityStamp = "004859db-40b9-408d-ae8f-81415e8d9d08",
                            TwoFactorEnabled = false,
                            UserName = "teacher@example.com"
                        },
                        new
                        {
                            Id = "759c92ec-9e55-40a3-a03a-997dcf0b98a4",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e17a79f8-0224-4727-ad23-b141e896d28e",
                            Email = "student@example.com",
                            EmailConfirmed = false,
                            FirstName = "John",
                            LastName = "Doe",
                            LockoutEnabled = false,
                            Nickname = "Johnny",
                            NormalizedEmail = "STUDENT@EXAMPLE.COM",
                            NormalizedUserName = "STUDENT@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEAuIJObaFuGqmRt4/doHhnca8OWtMwDsSjjNbQ98ZZ22ARF52RlabVJdQxOzwzgJUA==",
                            PhoneNumberConfirmed = false,
                            ProjectId = 0,
                            RoleId = "1",
                            SecurityStamp = "3068c8d7-b6a3-4d6e-82f4-dc0f2c24c831",
                            StudentID = "00001",
                            TwoFactorEnabled = false,
                            UserName = "student@example.com"
                        },
                        new
                        {
                            Id = "05f088ba-33fb-4056-82ec-d3f9c193e6e3",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "fb6ce9b3-d62d-4cb0-9b3c-363149d47c23",
                            Email = "student2@example.com",
                            EmailConfirmed = false,
                            FirstName = "Jeed",
                            LastName = "Deed",
                            LockoutEnabled = false,
                            Nickname = "asdasd",
                            NormalizedEmail = "STUDENT2@EXAMPLE.COM",
                            NormalizedUserName = "STUDENT2@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAENOI9C34QvohyOD5JEJTW/L3Ov+2eE356mDxR/5QtAeintvO+py+AO5KLh7n4ONhrg==",
                            PhoneNumberConfirmed = false,
                            ProjectId = 0,
                            RoleId = "1",
                            SecurityStamp = "0c12677a-0ff2-476c-905d-1a30e8541ca1",
                            StudentID = "00002",
                            TwoFactorEnabled = false,
                            UserName = "student2@example.com"
                        });
                });

            modelBuilder.Entity("CoopWeb.Data.Project", b =>
                {
                    b.Property<int>("ProjectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("ProjectId"));

                    b.Property<string>("Advisor")
                        .HasColumnType("longtext");

                    b.Property<string>("Chairman")
                        .HasColumnType("longtext");

                    b.Property<string>("Director1")
                        .HasColumnType("longtext");

                    b.Property<string>("Director2")
                        .HasColumnType("longtext");

                    b.Property<string>("ProjectName")
                        .HasColumnType("longtext");

                    b.Property<string>("WorkPlace")
                        .HasColumnType("longtext");

                    b.HasKey("ProjectId");

                    b.ToTable("Projects");

                    b.HasData(
                        new
                        {
                            ProjectId = 1,
                            ProjectName = "Project 1",
                            WorkPlace = "SCG Chemicals Co., Ltd."
                        },
                        new
                        {
                            ProjectId = 2,
                            ProjectName = "Project 2",
                            WorkPlace = "Toyota Motor Thailand"
                        });
                });

            modelBuilder.Entity("CoopWeb.Data.Stage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("Deadline")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<string>("FileName")
                        .HasColumnType("longtext");

                    b.Property<string>("FilePath")
                        .HasColumnType("longtext");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<int>("StageId")
                        .HasColumnType("int");

                    b.Property<string>("StageName")
                        .HasColumnType("longtext");

                    b.Property<int>("StageNumber")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Stages");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Deadline = new DateTime(2024, 11, 14, 21, 34, 42, 942, DateTimeKind.Local).AddTicks(1553),
                            ProjectId = 1,
                            StageId = 4,
                            StageNumber = 4
                        },
                        new
                        {
                            Id = 2,
                            Deadline = new DateTime(2024, 8, 14, 21, 34, 42, 942, DateTimeKind.Local).AddTicks(1594),
                            Description = "Description for Stage 1",
                            FileName = "File5.pdf",
                            FilePath = "File5.pdf",
                            ProjectId = 1,
                            StageId = 5,
                            StageName = "Stage 1",
                            StageNumber = 5,
                            Status = "Not Started"
                        },
                        new
                        {
                            Id = 3,
                            Deadline = new DateTime(2024, 9, 14, 21, 34, 42, 942, DateTimeKind.Local).AddTicks(1603),
                            Description = "Description for Stage 2",
                            FileName = "File6.pdf",
                            FilePath = "File6.pdf",
                            ProjectId = 1,
                            StageId = 6,
                            StageName = "Stage 2",
                            StageNumber = 2,
                            Status = "Not Started"
                        },
                        new
                        {
                            Id = 4,
                            Deadline = new DateTime(2024, 10, 14, 21, 34, 42, 942, DateTimeKind.Local).AddTicks(1609),
                            ProjectId = 1,
                            StageId = 7,
                            StageNumber = 3
                        },
                        new
                        {
                            Id = 5,
                            Deadline = new DateTime(2024, 11, 14, 21, 34, 42, 942, DateTimeKind.Local).AddTicks(1615),
                            Description = "Description for Stage 4",
                            FileName = "File8.pdf",
                            FilePath = "File8.pdf",
                            ProjectId = 1,
                            StageId = 8,
                            StageName = "Stage 8",
                            StageNumber = 4,
                            Status = "Not Started"
                        },
                        new
                        {
                            Id = 6,
                            Deadline = new DateTime(2024, 11, 14, 21, 34, 42, 942, DateTimeKind.Local).AddTicks(1627),
                            Description = "Description for Stage 4",
                            FileName = "File8.pdf",
                            FilePath = "File8.pdf",
                            ProjectId = 1,
                            StageId = 9,
                            StageName = "Stage 9",
                            StageNumber = 4,
                            Status = "Not Started"
                        },
                        new
                        {
                            Id = 7,
                            Deadline = new DateTime(2024, 8, 14, 21, 34, 42, 942, DateTimeKind.Local).AddTicks(1633),
                            ProjectId = 1,
                            StageId = 10,
                            StageNumber = 10
                        },
                        new
                        {
                            Id = 8,
                            Deadline = new DateTime(2024, 9, 14, 21, 34, 42, 942, DateTimeKind.Local).AddTicks(1638),
                            ProjectId = 1,
                            StageId = 11,
                            StageNumber = 11
                        },
                        new
                        {
                            Id = 9,
                            Deadline = new DateTime(2024, 10, 14, 21, 34, 42, 942, DateTimeKind.Local).AddTicks(1644),
                            ProjectId = 1,
                            StageId = 12,
                            StageNumber = 12
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("CoopWeb.Data.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("CoopWeb.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("CoopWeb.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("CoopWeb.Data.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoopWeb.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("CoopWeb.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
